// Generated by CoffeeScript 1.3.3

ce.module("ui.typeahead", function(self, ce, Backbone, Marionette, $, _) {
  var log, methods;
  log = function() {
    return ce.log.info(arguments_);
  };
  methods = {
    init: function(options) {
      var settings;
      settings = $.extend({}, $.uiTypeahead.defaults, options);
      return this.each(function() {
        var typeahead;
        return typeahead = new $.uiTypeahead(this, settings);
      });
    },
    reset: function() {
      return $.uiTypeahead.clear(this);
    }
  };
  $.fn.uiTypeahead = function(method) {
    if (methods[method]) {
      return methods[method].apply(this, Array.prototype.slice.call(arguments_, 1));
    } else if (typeof method === "object" || !method) {
      return methods.init.apply(this, arguments_);
    } else {
      return $.error("Method " + method + " does not exist on uiTypeahead");
    }
  };
  $.uiTypeahead = function(input, settings) {
    var $clearer, $hiddenInput, $img, $input, $removeBtn, $typeahead, $typeaheadView, $wrap, KEY, alreadyExists, clear_typeahead, currTotalResults, currTotalTypes, curr_types, fieldName, get_wikiImage, headerHeight, heightEach, heightEachReal, item_add, item_deselect, item_focus, item_select, itemsPerType, load_default, maxItems, maxResults, origWidth, resize_math, resultsPerType, searchTypes, search_resizer, set_image, totalHeight;
    load_default = function() {
      if (settings.defaultValue) {
        return $.ajax({
          url: settings.ajaxSearchURL,
          type: settings.ajaxSearchType,
          dataType: "json",
          data: {
            key: settings.defaultValue
          },
          success: function(data) {
            var hub;
            hub = data.PAYLOAD;
            return item_select(hub);
          }
        });
      }
    };
    item_focus = function(item) {};
    search_resizer = function() {
      var items;
      items = $(".uiSearchInput ul li");
      return $(curr_types).each(function() {
        var typeItems;
        typeItems = items.filter("." + this);
        $(typeItems).slice(0, itemsPerType - 1).show();
        return $(typeItems).slice(itemsPerType).hide();
      });
    };
    alreadyExists = function(value) {
      var doesExist;
      doesExist = false;
      $(settings.excludeItems).each(function() {
        if (this === value) {
          doesExist = true;
          return false;
        }
      });
      return doesExist;
    };
    resize_math = function() {
      var heightEachReal, itemsPerType, maxItems, totalHeight;
      totalHeight = (currTotalResults * heightEach) + (currTotalTypes * headerHeight) + 39;
      heightEachReal = totalHeight / currTotalResults;
      maxItems = $(window).height() / heightEachReal;
      if (currTotalTypes) {
        return itemsPerType = Math.floor(maxItems / currTotalTypes);
      }
    };
    item_add = function(name, method) {
      return $.ajax({
        url: settings.ajaxAddURL,
        type: settings.ajaxAddType,
        dataType: "json",
        async: false,
        data: $.extend(settings.ajaxAddParams, {
          name: name
        }),
        success: function(returnData) {
          var data;
          data = returnData.PAYLOAD;
          data.label = data.TEXT;
          data.value = data.ITEM_ID;
          item_select(data);
          return true;
        }
      });
    };
    item_select = function(item) {
      if (item.value !== 0) {
        if (!settings.clearOnSelect) {
          $hiddenInput.val(item.value.toString());
          $hiddenInput.keyup();
          $input.val(item.label);
          $img.attr("src", item.image);
          $wrap.addClass("selected");
          $hiddenInput.keyup();
          settings.onSelect(item);
          return settings.excludeItems.push(item.value);
        } else {
          settings.onSelect(item);
          return clear_typeahead();
        }
      } else {
        if (settings.allowAdd) {
          return item_add($input.val(), settings.ajaxSearchParams.method);
        }
      }
    };
    item_deselect = function() {
      $hiddenInput.val("");
      $input.focus();
      return $wrap.removeClass("selected");
    };
    set_image = function(item) {
      return $img;
    };
    clear_typeahead = function() {
      $hiddenInput.val("");
      $input.val("");
      $input.focus();
      return $wrap.removeClass("selected");
    };
    get_wikiImage = function(item) {
      return $.ajax({
        url: "/admin/_com/ajax/typeahead.cfc",
        type: "get",
        data: {
          method: "wikipedia_image",
          q: item.label
        },
        success: function(data) {
          return $img.attr("src", $.trim(data));
        }
      });
    };
    KEY = {
      BACKSPACE: 8,
      TAB: 9,
      RETURN: 13,
      ESC: 27,
      LEFT: 37,
      UP: 38,
      RIGHT: 39,
      DOWN: 40,
      COMMA: 188,
      ENTER: 13,
      DELETE: 46
    };
    searchTypes = 3;
    resultsPerType = 4;
    maxResults = searchTypes * resultsPerType;
    heightEach = 68;
    headerHeight = 18;
    currTotalResults = 0;
    currTotalTypes = 0;
    curr_types = [];
    maxItems = $(window).height() / heightEach;
    itemsPerType = 4;
    totalHeight = (currTotalResults * heightEach) + (currTotalTypes * headerHeight) + 39;
    heightEachReal = totalHeight / maxResults;
    if (settings.bucketed) {
      $(window).resize(function() {
        resize_math();
        return search_resizer();
      });
    }
    $hiddenInput = $(input).addClass("hide").focus(function() {}).blur(function() {
      return $input.blur();
    });
    fieldName = $hiddenInput.attr("name");
    origWidth = $hiddenInput.width();
    $hiddenInput.has(".hide");
    $input = $("<input/>").attr({
      type: "text",
      autocomplete: "off",
      spellcheck: false
    }).addClass("inputtext textInput").click(function() {
      if ($(this).val().length > 0 && $hiddenInput.val().length === 0) {
        return $input.autocomplete("widget").show();
      }
    }).blur(function() {}).keydown(function(event) {
      var next_token, previous_token;
      previous_token = void 0;
      next_token = void 0;
      switch (event.keyCode) {
        case KEY.LEFT:
        case KEY.RIGHT:
        case KEY.UP:
        case KEY.DOWN:
        case KEY.BACKSPACE:
          return item_deselect();
        case KEY.TAB:
        case KEY.RETURN:
        case KEY.COMMA:
        case KEY.ESC:
          return true;
      }
    });
    $typeahead = $("<div/>").addClass("uiTypeahead").addClass(settings.typeaheadClass);
    $wrap = $("<div/>").addClass("wrap").appendTo($typeahead).on("click", function(ev) {
      return $input.focus();
    });
    $img = $("<img/>");
    if (settings.showImage) {
      $typeahead.addClass("imageTypeahead");
      $img.addClass("photo img").appendTo($wrap);
    }
    if (settings.clearable) {
      $typeahead.addClass("uiClearableTypeahead");
      $clearer = $("<label/>").addClass("clear uiCloseButton icon-close").prependTo($wrap).click(function() {
        return clear_typeahead();
      });
      $removeBtn = $("<a class=\"close\" data-dismiss=\"modal\"></a>").attr({
        title: "Remove"
      }).appendTo($clearer);
    }
    $input.appendTo($wrap);
    $typeaheadView = $("<div/>").addClass("uiTypeaheadView").appendTo($typeahead);
    if ($.isFunction($.fn.autocomplete)) {
      $input.autocomplete({
        selectFirst: true,
        appendTo: $typeaheadView,
        source: function(req, add) {
          if ($.trim(req.term).length) {
            return $.ajax({
              url: settings.ajaxSearchURL,
              type: settings.ajaxSearchType,
              dataType: "json",
              data: $.extend({}, settings.ajaxSearchParams, {
                q: req.term
              }),
              success: function(data) {
                var anItem, curr_type, curr_type_friendly, payload, suggestions;
                suggestions = [];
                curr_type = "";
                curr_type_friendly = "";
                payload = data.PAYLOAD;
                currTotalResults = 0;
                currTotalTypes = 0;
                $.each(payload, function(i, val) {
                  var anItem;
                  anItem = payload[i];
                  currTotalResults++;
                  if (anItem.label.length > 70) {
                    anItem.label = anItem.label.substr(0, 67) + "...";
                  }
                  anItem.callToAction = false;
                  anItem.ignored = false;
                  return suggestions.push(anItem);
                });
                if (settings.allowViewMore) {
                  anItem = {
                    label: "See more results for &quot;" + $input.val() + "&quot;",
                    value: 0,
                    subText1: "",
                    subText2: "",
                    image: "",
                    ignored: false,
                    callToAction: true
                  };
                  suggestions.push(anItem);
                }
                if (settings.allowAdd) {
                  anItem = {
                    label: "Add &quot;" + $input.val() + "&quot;",
                    value: 0,
                    subText1: "",
                    subText2: "",
                    image: "",
                    ignored: false,
                    callToAction: true
                  };
                  suggestions.push(anItem);
                }
                $(this).data("suggestions", suggestions);
                return add(suggestions);
              }
            });
          }
        },
        focus: function(e, ui) {
          return false;
        },
        delay: 200,
        search: function(e, ui) {
          return item_deselect();
        },
        select: function(e, ui) {
          item_select(ui.item);
          return false;
        },
        change: function() {
          return false;
        }
      }).data("autocomplete")._renderMenu = function(ul, items) {
        $(ul).addClass(settings.size);
        if (settings.bucketed) {
          resize_math();
        }
        $.each(items, function(index, item) {
          var img, label, li, subtext1, subtext2;
          subtext1 = $("<span/>").addClass("subtext").text(item.subText1);
          subtext2 = $("<span/>").addClass("subtext").text(item.subText2);
          li = $("<li></li>").data("item.autocomplete", item).appendTo(ul);
          label = $("<a></a>").html("<div>" + item.label + "</div>").appendTo(li);
          img = $("<img/>").attr({
            src: item.image
          }).prependTo(label);
          if (item.ignored) {
            label.click(function() {
              return false;
            });
          }
          if (item.subText1) {
            label.append(subtext1);
          }
          if (item.subText2) {
            label.append(subtext2);
          }
          if (item.ignored) {
            li.addClass("ignore");
          }
          if (item.isHeader) {
            img.remove();
          }
          if (item.callToAction) {
            img.remove();
            return li.addClass("calltoaction");
          }
        });
        if (settings.bucketed) {
          return search_resizer();
        }
      };
    }
    $typeahead.insertAfter($hiddenInput);
    if (settings.appendTo) {
      $typeahead.prependTo(settings.appendTo);
    }
    if (jQuery.watermark) {
      $input.watermark(settings.watermarkText);
    }
    load_default();
    $(this).data("hiddenInput", $hiddenInput);
    $(this).data("input", $input);
    $(this).data("typeahead", $input);
    $(this).data("wrap", $input);
    return $input;
  };
  $.uiTypeahead.clear = function() {};
  return $.uiTypeahead.defaults = {
    ajaxSearchParams: null,
    ajaxAddParams: null,
    showImage: true,
    allowAdd: true,
    allowViewMore: false,
    excludeItems: [],
    clearable: true,
    appendTo: null,
    useExistingInput: false,
    clearOnSelect: false,
    size: "compact",
    bucketed: false,
    shownCount: 5,
    watermarkText: "Type in a search term",
    width: 384,
    typeaheadClass: "",
    minChars: 1,
    ajaxMethod: "get",
    type: "token",
    tokenLimit: null,
    jsonContainer: null,
    method: "GET",
    contentType: "json",
    autocomplete: null,
    queryParam: "q",
    onResult: null,
    selectFirst: true,
    autoFill: false,
    defaultValue: null,
    onAdd: function(item) {
      return true;
    },
    onSelect: function(item) {
      return true;
    }
  };
});
