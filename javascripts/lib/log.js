// Generated by CoffeeScript 1.3.3

ce.module("log", (function(self, ce, Backbone, Marionette, $, _, wndw) {
  var aps, callback_force, callback_func, con, exec_callback, idx, is_level, log_level, log_methods, logs, pass_methods, that, window;
  exec_callback = function(args) {
    if (callback_func && (callback_force || !con || !con.log)) {
      return callback_func.apply(window, args);
    }
  };
  is_level = function(level) {
    if (log_level > 0) {
      return log_level > level;
    } else {
      return log_methods.length + log_level <= level;
    }
  };
  window = wndw;
  aps = Array.prototype.slice;
  con = window.console;
  that = {};
  callback_func = void 0;
  callback_force = void 0;
  log_level = 9;
  log_methods = ["error", "warn", "info", "debug", "log"];
  pass_methods = "assert clear count dir dirxml exception group groupCollapsed groupEnd profile profileEnd table time timeEnd trace".split(" ");
  idx = pass_methods.length;
  logs = [];
  while (--idx >= 0) {
    (function(method) {
      return self[method] = function() {
        return log_level !== 0 && con && con[method] && con[method].apply(con, arguments_);
      };
    })(pass_methods[idx]);
  }
  idx = log_methods.length;
  while (--idx >= 0) {
    (function(idx, level) {
      return self[level] = function() {
        var args, log_arr;
        args = aps.call(arguments_);
        log_arr = [level].concat(args);
        logs.push(log_arr);
        exec_callback(log_arr);
        if (!con || !is_level(idx)) {
          return;
        }
        if (con.firebug) {
          return con[level].apply(window, args);
        } else {
          if (con[level]) {
            return con[level](args);
          } else {
            return con.log(args);
          }
        }
      };
    })(idx, log_methods[idx]);
  }
  this.setLevel = function(level) {
    return log_level = (typeof level === "number" ? level : 9);
  };
  return this.setCallback = function() {
    var args, i, max, _results;
    args = aps.call(arguments_);
    max = logs.length;
    i = max;
    callback_func = args.shift() || null;
    callback_force = (typeof args[0] === "boolean" ? args.shift() : false);
    i -= (typeof args[0] === "number" ? args.shift() : max);
    _results = [];
    while (i < max) {
      _results.push(exec_callback(logs[i++]));
    }
    return _results;
  };
}), window);
