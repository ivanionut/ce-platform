// Generated by CoffeeScript 1.3.3

ce.module("activity.participants", function(self, ce, Backbone, Marionette, $, _) {
  return self.Actions = Backbone.View.extend({
    template: "activity_participants-actions",
    initialize: function() {
      ce.ui.on("selected_count_changed", this.updateSelectedCount, this);
      self.on("row_selected", this.updateSelectedCount, this);
    },
    events: {
      "click .js-change-status": "changeParticipantStatus",
      "click .js-print-certificate": "printCertificate",
      "click .js-remove-participants": "removeParticipants",
      "click .js-unselect-participants": "unselectParticipants"
    },
    activateMenu: function() {
      this.$el.find(".js-action-menu-button").removeClass("disabled");
      return this.$el.find(".js-action-menu-label").removeClass("disabled");
    },
    changeParticipantStatus: function(e) {
      var newStatusId, selectedParticipants;
      newStatusId = parseInt(e.currentTarget.id.split("-")[2]);
      selectedParticipants = this.collection.getSelected();
      _.forEach(selectedParticipants, function(model) {
        switch (newStatusId) {
          case 1:
            model.set({
              STATUSID: 1,
              ISSTATUS1: true,
              ISSTATUS2: false,
              ISSTATUS3: false,
              ISSTATUS4: false
            });
            break;
          case 2:
            model.set({
              STATUSID: 2,
              ISSTATUS1: false,
              ISSTATUS2: true,
              ISSTATUS3: false,
              ISSTATUS4: false
            });
            break;
          case 3:
            model.set({
              STATUSID: 3,
              ISSTATUS1: false,
              ISSTATUS2: false,
              ISSTATUS3: true,
              ISSTATUS4: false
            });
            break;
          case 4:
            model.set({
              STATUSID: 4,
              ISSTATUS1: false,
              ISSTATUS2: false,
              ISSTATUS3: false,
              ISSTATUS4: true
            });
        }
        model.save();
      });
      self.trigger("actions_status_changed");
    },
    deactivateMenu: function() {
      this.$el.find(".js-action-menu-button").addClass("disabled");
      this.$el.find(".js-action-menu-label").addClass("disabled");
    },
    printCertificate: function(e) {
      var certType;
      certType = e.currentTarget.id.split("-")[1];
      console.log(certType);
    },
    removeParticipants: function() {
      if (confirm("Are you sure you wish to remove " + this.collection.getSelectedCount() + " attendees?")) {
        console.log("Removing attendees...");
      }
      self.trigger("actions_participants_removed");
    },
    render: function() {
      var _temp;
      this.$el.empty();
      _temp = _.template(ce.templates.get(this.template));
      this.$el.html(_temp);
      return this;
    },
    unselectParticipants: function() {
      var selectedParticipants;
      selectedParticipants = this.collection.getSelected();
      _.forEach(selectedParticipants, function(model) {
        return model.set({
          ISSELECTED: false
        });
      });
      ce.ui.trigger("selected_count_changed");
    },
    updateSelectedCount: function() {
      var selectedCount;
      selectedCount = this.collection.getSelectedCount();
      this.$el.find(".js-attendee-status-selected-count").text(selectedCount);
      if (selectedCount > 0) {
        this.activateMenu();
      } else {
        this.deactivateMenu();
      }
    }
  });
});
