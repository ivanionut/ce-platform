// Generated by CoffeeScript 1.3.3

ce.module("activity.participants", function(self, ce, Backbone, Marionette, $, _) {
  return self.Filter = Backbone.View.extend({
    template: _.template(ce.templates.get("activity_participants-filter")),
    initialize: function() {
      self.on("selected_count_changed", this.getFilterCounts, this);
    },
    events: {
      "click .js-clear-attendee-search": "clearAttendeeSearch",
      "click .js-attendee-search-typeahead": "searchAttendeeList",
      "click .js-attendees-filter li.js-attendee-status": "filteredAttendeeStatus",
      "click .js-attendees-filter li.js-attendee-status-all": "showAll",
      "click .js-attendees-filter li.js-attendee-status-Selected": "showSelected"
    },
    render: function() {
      this.$el.html(this.template(this.collection.info()));
      this.getFilterCounts();
      self.trigger("filter_loaded");
      return this.el;
    },
    clearAttendeeSearch: function() {
      participants.pageData.nStatus = 0;
      participants.changePage();
      participants.attendeeSearch["input"].val("");
      return participants.attendeeSearch["clear"].hide();
    },
    getFilterCounts: function() {
      var copyOfCollection, filterOptions;
      copyOfCollection = _.clone(this.collection);
      filterOptions = this.$el.find('.js-attendee-status');
      this.$el.find('li.js-attendee-status-all').find('span.js-attendee-status-count').text("(" + copyOfCollection.information.totalUnfilteredRecords + ")");
      $.each(filterOptions, function() {
        var filterStatus;
        filterStatus = $(this).attr('id').replace('status', '');
        copyOfCollection.setFilter(['STATUSID'], filterStatus);
        $(this).find('span.js-attendee-status-count').text("(" + copyOfCollection.information.totalRecords + ")");
      });
      copyOfCollection.setFilter(['ISSELECTED'], 'true');
      this.$el.find(".js-attendee-status-selected-count").text(copyOfCollection.information.totalRecords);
    },
    filteredAttendeeStatus: function(e) {
      var filterStatusId, filterStatusName;
      filterStatusId = $(e.currentTarget).attr('id').replace('status', '');
      filterStatusName = $(e.currentTarget).find('.js-attendee-status-name').text();
      this.collection.setFilter(['STATUSID'], filterStatusId);
      this.collection.pager();
      this.$el.find('.js-attendee-status-title').text(filterStatusName);
      self.trigger("filter_selected");
    },
    searchAttendeeList: function() {
      var input, statusList;
      input = $(this);
      statusList = participants.attendeeList.statuses["filtered"].attendees;
      if (input.val().length > 0) {
        participants.attendeeSearch.clear.show();
      } else {
        participants.attendeeSearch.clear.hide();
      }
      statusList.length = 0;
      participants.contentContainer.html("");
      if (input.val().length > 0) {
        $.each(participants.attendeeList["attendees"], function(i, item) {
          if ((item.FIRSTNAME.startsWith(input.val()) || item.LASTNAME.startsWith(input.val())) && !$.ListFind(statusList, item.ATTENDEEID)) {
            return statusList.push(item.ATTENDEEID);
          }
        });
        participants.pageData.nStatus = "filtered";
        participants.updatePaginator();
        return participants.changePage();
      }
    },
    showAll: function() {
      this.collection.setFilter(['STATUSID'], [1, 2, 3, 4]);
      this.collection.pager();
      this.$el.find('.js-attendee-status-title').text("All");
    },
    showSelected: function() {
      this.collection.setFilter(['ISSELECTED'], 'true');
      this.collection.pager();
      return this.$el.find('.js-attendee-status-title').text("Selected");
    }
  });
});
