// Generated by CoffeeScript 1.3.3
/*
THIS IS HOW TO INIT THE FILTER
# el: ELEMENT PLACEHOLDER
# collection: COLLECTION OF MODELS
# filterOptionField: MODEL ATTRIBUTE THE FILTER WILL USE FOR CLICKABLE OPTIONS
# filterOptions: KEY-VALUE PAIRS, EACH OF WHICH WILL TURN INTO A CLICKABLE LIST ITEM
# typeaheadField: FIELD TO SEARCH FOR VIAT HE TYPEAHEAD VALUE
# typeaheadPlaceholder: PLACEHOLDER TEXT FOR THE TYPEAHEAD

self.filter = new ce.ui.Filter(
    el: "string"
    collection: object
    filterOptionField: "string"
    filterOptions: { "Label": Value, ["Label": Value]... }
    typeaheadField: "string"
    typeaheadPlaceholder: "string"
    ).render()
*/

ce.module("ui", function(self, ce, Backbone, Marionette, $, _) {
  return self.Filter = Backbone.View.extend({
    template: "ui-filter",
    initialize: function() {
      self.on("selected_count_changed row_selected", this.getFilterCounts, this);
    },
    events: {
      "click .js-clear-search-filter": "clearSearch",
      "click .js-search-filter-typeahead": "preventClose",
      "keyup .js-search-filter-typeahead": "searchCollection",
      "click .js-filter li.js-filter-option": "filterCollection",
      "click .js-filter li.js-filter-all": "showAll",
      "click .js-filter li.js-filter-selected": "showSelected"
    },
    render: function() {
      var filterOptionContainer, _temp;
      this.$el.empty();
      _temp = _.template(ce.templates.get(this.template));
      this.$el.html(_temp(this.collection.info()));
      this.$el.find(".js-search-filter-typeahead").attr("placeholder", this.options.typeaheadPlaceholder);
      filterOptionContainer = this.$el.find(".js-filter-options");
      _.forEach(this.options.filterOptions, function(id, label) {
        var currFilterOption;
        currFilterOption = "<li class=\"js-filter-option js-filter-option-" + id + "\" id=\"filter" + id + "\"><a href=\"javascript://\"><span class=\"js-filter-option-name\">" + label + "</span> <span class=\"js-filter-option-count\"></span></a></li>";
        return $(currFilterOption).appendTo(filterOptionContainer);
      });
      this.getFilterCounts();
      self.trigger("filter_loaded");
      return this.el;
    },
    clearSearch: function() {
      this.$el.find(".js-search-filter-typeahead").val("");
      this.$el.find(".js-clear-search-filter").hide();
      this.showAll();
    },
    getFilterCounts: function() {
      var coll, curr, filterByField, filterOptions;
      curr = this;
      coll = this.collection;
      filterByField = this.options.filterOptionField;
      filterOptions = this.$el.find(".js-filter-option");
      this.$el.find('li.js-filter-all').find('span.js-filter-option-all-count').text("(" + coll.getTotalCount() + ")");
      $.each(filterOptions, function(i, filter) {
        var $filter, filterByValue;
        $filter = $(filter);
        filterByValue = parseInt($(filter).attr('id').replace('filter', ''));
        $filter.find('span.js-filter-option-count').text("(" + eval("coll.whereExpanded({" + filterByField + ": " + filterByValue + "})").length + ")");
      });
      this.$el.find(".js-filter-option-selected-count").text(coll.getSelectedCount());
    },
    filterCollection: function(e) {
      var filterOptionId, filterOptionName;
      filterOptionId = $(e.currentTarget).attr('id').replace('filter', '');
      filterOptionName = $(e.currentTarget).find('.js-filter-option-name').text();
      this.collection.setFilter([this.options.filterOptionField], filterOptionId);
      this.collection.pager();
      this.updateFilterLabel(filterOptionName);
    },
    preventClose: function(e) {
      return false;
    },
    searchCollection: function(e) {
      var filterVal, input, typeaheadField;
      if ($.inArray(e.keyCode, [32, 13, 16, 17]) !== 0) {
        input = this.$el.find(".js-search-filter-typeahead");
        filterVal = input.val();
        typeaheadField = this.options.typeaheadField;
        if (input.val().length > 0) {
          this.$el.find(".js-clear-search-filter").show();
          $.each(this.collection.origModels, function(i, item) {
            var matchFilter, matches;
            matchFilter = new RegExp(filterVal.replace(/(\S+)/g, function(s) {
              return "\\b" + s + ".*";
            }).replace(/\s+/g, ""), "gi");
            matches = matchFilter.exec(item.get(typeaheadField));
            if (matches !== null) {
              return item.set({
                "ISFILTERMATCH": true,
                silent: true
              });
            } else {
              return item.set({
                "ISFILTERMATCH": false,
                silent: true
              });
            }
          });
          this.collection.setFilter(["ISFILTERMATCH"], 'true');
          this.updateFilterLabel("Filtered");
        } else {
          this.$el.find(".js-clear-search-filter").hide();
          this.showAll();
        }
      }
    },
    showAll: function() {
      this.collection.setFilter(['cid'], '');
      this.collection.pager();
      this.updateFilterLabel("All");
    },
    showSelected: function() {
      this.collection.setFilter(['ISSELECTED'], 'true');
      this.collection.pager();
      this.updateFilterLabel("Selected");
    },
    updateFilterLabel: function(filterName) {
      this.$el.find('.js-filter-option-title').text(filterName);
      self.trigger("filter_filtered", filterName);
    }
  });
});
